generator kysely {
  provider            = "prisma-kysely"
  // booleanTypeOverride = "boolean"
  output              = "../src/lib/db"
  fileName            = "schema.d.ts"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model SummonerProfile {
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  platform      String
  summonerName  String
  summonerLevel Int
  profileIconId Int
  summonerId    String
  accountId     String
  puuid         String   @id

  @@unique([summonerName, platform])
  @@index([summonerName(sort: Asc), platform(sort: Asc)])
}

model SummonerRankedStats {
  summonerId     String
  platform       String
  leagueId       String
  queueType      String
  tier           String
  rank           String
  lp             Int
  wins           Int
  losses         Int
  veteran        Boolean
  inactive       Boolean
  freshBlood     Boolean
  hotStreak      Boolean
  promosTarget   Int?
  promosWins     Int?
  promosLosses   Int?
  promosProgress String?

  @@id([summonerId, platform, queueType])
  @@unique([summonerId, platform, queueType])
  @@index([summonerId(sort: Asc), platform(sort: Asc), queueType(sort: Asc)])
}

model Match {
  matchId                 String             @id
  createdAt               DateTime           @default(now())
  gameCreation            DateTime
  gameDuration            Int
  gameEndTimestamp        DateTime
  gameId                  String
  gameMode                String
  gameStartTimestamp      DateTime
  gameType                String
  gameVersion             String
  mapId                   Int
  platform                String
  queueId                 Int
  blueBaronKills          Int
  blueChampionKills       Int
  blueDragonKills         Int
  blueInhibitorKills      Int
  blueRiftHeraldKills     Int
  blueTowerKills          Int
  redBaronKills           Int
  redChampionKills        Int
  redDragonKills          Int
  redInhibitorKills       Int
  redRiftHeraldKills      Int
  redTowerKills           Int
  blueFirstBaronKill      Boolean
  blueFirstChampionKill   Boolean
  blueFirstDragonKill     Boolean
  blueFirstInhibitorKill  Boolean
  blueFirstRiftHeraldKill Boolean
  blueFirstTowerKill      Boolean
  blueWon                 Boolean
  matchParticipant        MatchParticipant[]

  @@index([matchId(sort: Desc)])
}

model MatchParticipant {
  matchId                        String
  assists                        Int
  baronKills                     Int
  champExperience                Int
  champLevel                     Int
  championId                     Int
  championName                   String
  controlWardsPlaced             Int
  damageDealtToBuildings         Int
  damageDealtToObjectives        Int
  damageDealtToTurrets           Int
  damageSelfMitigated            Int
  deaths                         Int
  doubleKills                    Int
  dragonKills                    Int
  firstBloodAssist               Boolean
  firstBloodKill                 Boolean
  firstTowerAssist               Boolean
  firstTowerKill                 Boolean
  gameEndedInEarlySurrender      Boolean
  gameEndedInSurrender           Boolean
  goldEarned                     Int
  goldSpent                      Int
  induvidualPosition             String
  inhibitorKills                 Int
  inhibitorTakedowns             Int
  inhibitorsLost                 Int
  item0                          Int
  item1                          Int
  item2                          Int
  item3                          Int
  item4                          Int
  item5                          Int
  item6                          Int
  itemsPurchased                 Int
  killingSprees                  Int
  kills                          Int
  lane                           String
  largestKillingSpree            Int
  largestMultiKill               Int
  longestTimeSpentLiving         Int
  magicDamageDealt               Int
  magicDamageDealtToChampions    Int
  magicDamageTaken               Int
  neutralMinionsKilled           Int
  objectivesStolen               Int
  objectivesStolenAssists        Int
  participantId                  Int
  pentaKills                     Int
  perkDefense                    Int
  perkFlex                       Int
  perkOffense                    Int
  perkPrimaryStyle               Int
  perkPrimary1                   Int
  perkPrimary2                   Int
  perkPrimary3                   Int
  perkPrimary4                   Int
  perkSecondaryStyle             Int
  perkSecondary1                 Int
  perkSecondary2                 Int
  physicalDamageDealt            Int
  physicalDamageDealtToChampions Int
  physicalDamageTaken            Int
  puuid                          String
  quadraKills                    Int
  role                           String
  sightWardsBoughtInGame         Int
  spell1Casts                    Int
  spell2Casts                    Int
  spell3Casts                    Int
  spell4Casts                    Int
  summoner1Casts                 Int
  summoner1Id                    Int
  summoner2Casts                 Int
  summoner2Id                    Int
  summonerName                   String
  teamId                         Int
  teamPosition                   String
  timeCCingOthers                Int
  timePlayed                     Int
  totalDamageDealt               Int
  totalDamageDealtToChampions    Int
  totalDamageTaken               Int
  totalHeal                      Int
  totalHealsOnTeammates          Int
  totalMinionsKilled             Int
  totalTimeCCDealt               Int
  totalTimeSpentDead             Int
  totalUnitsHealed               Int
  tripleKills                    Int
  trueDamageDealt                Int
  trueDamageDealtToChampions     Int
  trueDamageTaken                Int
  turretKills                    Int
  turretTakedowns                Int
  turretsLost                    Int
  unrealKills                    Int
  visionScore                    Int
  visionWardsBoughtInGame        Int
  wardsKilled                    Int
  wardsPlaced                    Int
  win                            Boolean
  match                          Match   @relation(fields: [matchId], references: [matchId], onDelete: Cascade)

  @@id([matchId, puuid])
  @@index([matchId(sort: Desc)])
}
